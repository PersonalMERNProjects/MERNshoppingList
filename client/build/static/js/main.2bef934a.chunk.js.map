{"version":3,"sources":["components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","reducers/itemReducer.js","reducers/index.js","store.js","components/itemModal.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggleNavbarHandler","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","ShoppingList","onDelete","id","props","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","catch","err","console","error","delete","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","itemModal","modal","toggle","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bef934a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container\r\n} from 'reactstrap'\r\n\r\nclass AppNavbar extends Component {\r\n    state = {\r\n        isOpen: false,\r\n    }\r\n\r\n    toggleNavbarHandler = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                    <Container>\r\n                        <NavbarBrand href=\"/\">ShoppingList</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNavbarHandler} />\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink href=\"https://github.com\">\r\n                                        Git Hub\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AppNavbar;","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nexport const getItems = () => dispatch => {\r\n    dispatch(setItemsLoading());\r\n    axios.get('/api/items').then(res =>\r\n        dispatch({\r\n            type: GET_ITEMS,\r\n            payload: res.data\r\n        })\r\n    )\r\n        .catch((err) => {\r\n        console.error(\"fetch failed\", err)\r\n    })\r\n    \r\n}\r\nexport const addItem = (item) => dispatch =>{\r\n    axios.post('/api/items', item)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: ADD_ITEM,\r\n                payload: res.data\r\n            })\r\n    })\r\n}   \r\n\r\n\r\nexport const deleteItem = (id) => dispatch => {\r\n    axios.delete(`/api/items/${id}`)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: DELETE_ITEM,\r\n                payload: id\r\n            })\r\n        })\r\n} \r\n\r\n\r\n\r\nexport const setItemsLoading = () => {\r\n    return {\r\n        type: ITEMS_LOADING\r\n    }\r\n}","export const GET_ITEMS = \"GET_ITEMS\"\r\nexport const ADD_ITEM = \"ADD_ITEM\"\r\nexport const DELETE_ITEM = \"DELETE_ITEM\"\r\nexport const ITEMS_LOADING = \"ITEMS_LOADING\"","import React, { Component } from 'react';\r\nimport { Container, ListGroup, ListGroupItem, Button }\r\n    from 'reactstrap'\r\nimport {CSSTransition, TransitionGroup }from 'react-transition-group'\r\nimport { connect } from 'react-redux'\r\nimport { getItems, deleteItem } from '../actions/itemActions';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nclass ShoppingList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getItems();\r\n    }\r\n\r\n    onDelete = (id) => {\r\n        this.props.deleteItem(id)\r\n    }\r\n    \r\n    render() {\r\n        \r\n        const { items } = this.props.item;\r\n        return (\r\n            <Container>\r\n                \r\n                <ListGroup>\r\n                    <TransitionGroup className=\"shopping-list\">\r\n                        {items.map(({ _id, name }) => (\r\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                                <ListGroupItem>\r\n                                    <Button\r\n                                        className=\"remove-btn mr-3\"\r\n                                        color=\"danger\"\r\n                                        size=\"sm\"\r\n                                        onClick= {this.onDelete.bind(this, _id)}\r\n                                    >&times;</Button>\r\n                                     {name}\r\n                                </ListGroupItem>\r\n                            </CSSTransition>\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ListGroup>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nShoppingList.propTypes = {\r\n    getItems: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList)","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types'\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false\r\n}\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload.items,\r\n                loading: false\r\n            } \r\n        case DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            }\r\n        case ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                items: [action.payload.item, ...state.items]\r\n            }\r\n        case ITEMS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading:true\r\n            }\r\n        default:\r\n            return state; \r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport itemReducer from './itemReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    item: itemReducer\r\n})\r\n\r\n// C:\\Program Files\\MongoDB\\Server\\4.2\\data\\","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer,\r\n    initialState,\r\n    compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n);\r\n\r\nexport default store; ","import React, { Component } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport { connect } from 'react-redux'\r\nimport { addItem } from '../actions/itemActions';\r\n\r\n\r\n\r\nclass itemModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: ''\r\n    }\r\n    toggle = () => {\r\n        this.setState({\r\n            modal:!this.state.modal\r\n        })\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const newItem = {\r\n            name: this.state.name \r\n        }\r\n        //Add item via addItem Action\r\n        this.props.addItem(newItem)\r\n\r\n\r\n        //close modal\r\n        this.toggle(); \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button color=\"dark\" style={{ marginBottom: '2rem' }}\r\n                onClick={this.toggle}>\r\n                    Add Item\r\n               </Button>  \r\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>Add To Shopping List</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"item\">Add To Shopping List</Label>\r\n                                <Input type=\"text\" name=\"name\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Add Shopping item\"\r\n                                    onChange={this.onChange} />\r\n                                <Button color=\"dark\" style={{ marginTop: '2rem' }}\r\n                                block>Add Item</Button>\r\n                           </FormGroup> \r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {addItem})(itemModal)\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport AppNavbar from './components/AppNavbar'\nimport ShoppingList from './components/ShoppingList'\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport ItemModal from './components/itemModal'\nimport { Container } from 'reactstrap'\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar />\n        <Container>\n          <ItemModal />\n          <ShoppingList />\n        </Container>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n//commenting ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}